function [ sysk,sysd ] = DP_System( parDP )
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Labor Regelungssysteme 1, WS 16/17
%
% Funktion DP_System
% Eingang: 
%     parDP       Parameterstruktur
% Ausgänge:
%     sysk        LTI Objekt kontinuierliche Zustandsdarstellung
%     sysd        LTI Objekt diskrete Zustandsdarstellung
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

l1 = parDP.l1;
l2 = parDP.l2;
m1 = parDP.m1;
m2 = parDP.m2;
a1 = parDP.a1;
a2 = parDP.a2;
J1 = parDP.J1;
J2 = parDP.J2;
d1 = parDP.d1;
d2 = parDP.d2;
m  = parDP.m;

Ta = parDP.Ta;
g = parDP.g;

phi1R = parDP.phi1R;
omega1R = parDP.omega1R;
phi2R = parDP.phi2R;
omega2R = parDP.omega2R;
sR = parDP.sR;
wR = parDP.wR;	% =spR
uR = parDP.uR;

% Matrizen aus Maple exportiert
A = [0 1 0 0 0 0; -0.2e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) ^ 2 * (-cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 - sin(phi1R - phi2R) * a2 ^ 3 * l1 * m2 ^ 2 * omega2R ^ 2 - uR * cos(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 - cos(phi1R - phi2R) * sin(phi2R) * a2 ^ 2 * g * l1 * m2 ^ 2 - J2 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega2R ^ 2 + uR * cos(phi1R) * a1 * a2 ^ 2 * m1 * m2 + uR * cos(phi1R) * a2 ^ 2 * l1 * m2 ^ 2 + sin(phi1R) * a1 * a2 ^ 2 * g * m1 * m2 + sin(phi1R) * a2 ^ 2 * g * l1 * m2 ^ 2 - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R + J2 * uR * cos(phi1R) * a1 * m1 + J2 * uR * cos(phi1R) * l1 * m2 + J2 * sin(phi1R) * a1 * g * m1 + J2 * sin(phi1R) * g * l1 * m2 - a2 ^ 2 * d1 * m2 * omega1R - a2 ^ 2 * d2 * m2 * omega1R + a2 ^ 2 * d2 * m2 * omega2R - J2 * d1 * omega1R - J2 * d2 * omega1R + J2 * d2 * omega2R) * cos(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * sin(phi1R - phi2R) + 0.1e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) * (sin(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 - cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 - cos(phi1R - phi2R) * a2 ^ 3 * l1 * m2 ^ 2 * omega2R ^ 2 + uR * sin(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 + sin(phi1R - phi2R) * sin(phi2R) * a2 ^ 2 * g * l1 * m2 ^ 2 - J2 * cos(phi1R - phi2R) * a2 * l1 * m2 * omega2R ^ 2 - uR * sin(phi1R) * a1 * a2 ^ 2 * m1 * m2 - uR * sin(phi1R) * a2 ^ 2 * l1 * m2 ^ 2 + cos(phi1R) * a1 * a2 ^ 2 * g * m1 * m2 + cos(phi1R) * a2 ^ 2 * g * l1 * m2 ^ 2 + sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R - sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R - J2 * uR * sin(phi1R) * a1 * m1 - J2 * uR * sin(phi1R) * l1 * m2 + J2 * cos(phi1R) * a1 * g * m1 + J2 * cos(phi1R) * g * l1 * m2) 0.1e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) * (-0.2e1 * cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 - a2 ^ 2 * d1 * m2 - a2 ^ 2 * d2 * m2 - J2 * d1 - J2 * d2) 0.2e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) ^ 2 * (-cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 - sin(phi1R - phi2R) * a2 ^ 3 * l1 * m2 ^ 2 * omega2R ^ 2 - uR * cos(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 - cos(phi1R - phi2R) * sin(phi2R) * a2 ^ 2 * g * l1 * m2 ^ 2 - J2 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega2R ^ 2 + uR * cos(phi1R) * a1 * a2 ^ 2 * m1 * m2 + uR * cos(phi1R) * a2 ^ 2 * l1 * m2 ^ 2 + sin(phi1R) * a1 * a2 ^ 2 * g * m1 * m2 + sin(phi1R) * a2 ^ 2 * g * l1 * m2 ^ 2 - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R + J2 * uR * cos(phi1R) * a1 * m1 + J2 * uR * cos(phi1R) * l1 * m2 + J2 * sin(phi1R) * a1 * g * m1 + J2 * sin(phi1R) * g * l1 * m2 - a2 ^ 2 * d1 * m2 * omega1R - a2 ^ 2 * d2 * m2 * omega1R + a2 ^ 2 * d2 * m2 * omega2R - J2 * d1 * omega1R - J2 * d2 * omega1R + J2 * d2 * omega2R) * cos(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * sin(phi1R - phi2R) + 0.1e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) * (-sin(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 + cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega1R ^ 2 + cos(phi1R - phi2R) * a2 ^ 3 * l1 * m2 ^ 2 * omega2R ^ 2 - uR * sin(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 + uR * cos(phi1R - phi2R) * sin(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 - sin(phi1R - phi2R) * sin(phi2R) * a2 ^ 2 * g * l1 * m2 ^ 2 - cos(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * g * l1 * m2 ^ 2 + J2 * cos(phi1R - phi2R) * a2 * l1 * m2 * omega2R ^ 2 - sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R + sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R) 0.1e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) * (-0.2e1 * sin(phi1R - phi2R) * a2 ^ 3 * l1 * m2 ^ 2 * omega2R - 0.2e1 * J2 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega2R + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 + a2 ^ 2 * d2 * m2 + J2 * d2) 0 0; 0 0 0 1 0 0; (-sin(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 + cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 + cos(phi1R - phi2R) * a1 ^ 2 * a2 * l1 * m1 * m2 * omega1R ^ 2 + cos(phi1R - phi2R) * a2 * l1 ^ 3 * m2 ^ 2 * omega1R ^ 2 + uR * sin(phi1R) * cos(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 + uR * cos(phi1R) * sin(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 + uR * sin(phi1R) * cos(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + uR * cos(phi1R) * sin(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + sin(phi1R - phi2R) * sin(phi1R) * a1 * a2 * g * l1 * m1 * m2 - cos(phi1R - phi2R) * cos(phi1R) * a1 * a2 * g * l1 * m1 * m2 + sin(phi1R - phi2R) * sin(phi1R) * a2 * g * l1 ^ 2 * m2 ^ 2 - cos(phi1R - phi2R) * cos(phi1R) * a2 * g * l1 ^ 2 * m2 ^ 2 + J1 * cos(phi1R - phi2R) * a2 * l1 * m2 * omega1R ^ 2 - sin(phi1R - phi2R) * a2 * d1 * l1 * m2 * omega1R - sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R + sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) - 0.2e1 * (cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 + sin(phi1R - phi2R) * a1 ^ 2 * a2 * l1 * m1 * m2 * omega1R ^ 2 + sin(phi1R - phi2R) * a2 * l1 ^ 3 * m2 ^ 2 * omega1R ^ 2 - uR * cos(phi1R) * cos(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 - uR * cos(phi1R) * cos(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 - cos(phi1R - phi2R) * sin(phi1R) * a1 * a2 * g * l1 * m1 * m2 - cos(phi1R - phi2R) * sin(phi1R) * a2 * g * l1 ^ 2 * m2 ^ 2 + J1 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega1R ^ 2 + uR * cos(phi2R) * a1 ^ 2 * a2 * m1 * m2 + uR * cos(phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + sin(phi2R) * a1 ^ 2 * a2 * g * m1 * m2 + sin(phi2R) * a2 * g * l1 ^ 2 * m2 ^ 2 + cos(phi1R - phi2R) * a2 * d1 * l1 * m2 * omega1R + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R + J1 * uR * cos(phi2R) * a2 * m2 + J1 * sin(phi2R) * a2 * g * m2 + a1 ^ 2 * d2 * m1 * omega1R - a1 ^ 2 * d2 * m1 * omega2R + d2 * l1 ^ 2 * m2 * omega1R - d2 * l1 ^ 2 * m2 * omega2R + J1 * d2 * omega1R - J1 * d2 * omega2R) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) ^ 2 * cos(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * sin(phi1R - phi2R) (0.2e1 * sin(phi1R - phi2R) * a1 ^ 2 * a2 * l1 * m1 * m2 * omega1R + 0.2e1 * sin(phi1R - phi2R) * a2 * l1 ^ 3 * m2 ^ 2 * omega1R + 0.2e1 * J1 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega1R + cos(phi1R - phi2R) * a2 * d1 * l1 * m2 + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 + a1 ^ 2 * d2 * m1 + d2 * l1 ^ 2 * m2 + J1 * d2) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) (sin(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 - cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 - cos(phi1R - phi2R) * a1 ^ 2 * a2 * l1 * m1 * m2 * omega1R ^ 2 - cos(phi1R - phi2R) * a2 * l1 ^ 3 * m2 ^ 2 * omega1R ^ 2 - uR * cos(phi1R) * sin(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 - uR * cos(phi1R) * sin(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 - sin(phi1R - phi2R) * sin(phi1R) * a1 * a2 * g * l1 * m1 * m2 - sin(phi1R - phi2R) * sin(phi1R) * a2 * g * l1 ^ 2 * m2 ^ 2 - J1 * cos(phi1R - phi2R) * a2 * l1 * m2 * omega1R ^ 2 - uR * sin(phi2R) * a1 ^ 2 * a2 * m1 * m2 - uR * sin(phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + cos(phi2R) * a1 ^ 2 * a2 * g * m1 * m2 + cos(phi2R) * a2 * g * l1 ^ 2 * m2 ^ 2 + sin(phi1R - phi2R) * a2 * d1 * l1 * m2 * omega1R + sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R - sin(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R - J1 * uR * sin(phi2R) * a2 * m2 + J1 * cos(phi2R) * a2 * g * m2) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) + 0.2e1 * (cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R ^ 2 + sin(phi1R - phi2R) * a1 ^ 2 * a2 * l1 * m1 * m2 * omega1R ^ 2 + sin(phi1R - phi2R) * a2 * l1 ^ 3 * m2 ^ 2 * omega1R ^ 2 - uR * cos(phi1R) * cos(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 - uR * cos(phi1R) * cos(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 - cos(phi1R - phi2R) * sin(phi1R) * a1 * a2 * g * l1 * m1 * m2 - cos(phi1R - phi2R) * sin(phi1R) * a2 * g * l1 ^ 2 * m2 ^ 2 + J1 * sin(phi1R - phi2R) * a2 * l1 * m2 * omega1R ^ 2 + uR * cos(phi2R) * a1 ^ 2 * a2 * m1 * m2 + uR * cos(phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + sin(phi2R) * a1 ^ 2 * a2 * g * m1 * m2 + sin(phi2R) * a2 * g * l1 ^ 2 * m2 ^ 2 + cos(phi1R - phi2R) * a2 * d1 * l1 * m2 * omega1R + cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega1R - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 * omega2R + J1 * uR * cos(phi2R) * a2 * m2 + J1 * sin(phi2R) * a2 * g * m2 + a1 ^ 2 * d2 * m1 * omega1R - a1 ^ 2 * d2 * m1 * omega2R + d2 * l1 ^ 2 * m2 * omega1R - d2 * l1 ^ 2 * m2 * omega2R + J1 * d2 * omega1R - J1 * d2 * omega2R) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) ^ 2 * cos(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * sin(phi1R - phi2R) (0.2e1 * cos(phi1R - phi2R) * sin(phi1R - phi2R) * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 * omega2R - cos(phi1R - phi2R) * a2 * d2 * l1 * m2 - a1 ^ 2 * d2 * m1 - d2 * l1 ^ 2 * m2 - J1 * d2) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) 0 0; 0 0 0 0 0 1; 0 0 0 0 0 0;];
b = [0; 0.1e1 / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2) * (-cos(phi1R - phi2R) * cos(phi2R) * a2 ^ 2 * l1 * m2 ^ 2 + cos(phi1R) * a1 * a2 ^ 2 * m1 * m2 + cos(phi1R) * a2 ^ 2 * l1 * m2 ^ 2 + J2 * cos(phi1R) * a1 * m1 + J2 * cos(phi1R) * l1 * m2); 0; (-cos(phi1R) * cos(phi1R - phi2R) * a1 * a2 * l1 * m1 * m2 - cos(phi1R) * cos(phi1R - phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + cos(phi2R) * a1 ^ 2 * a2 * m1 * m2 + cos(phi2R) * a2 * l1 ^ 2 * m2 ^ 2 + J1 * cos(phi2R) * a2 * m2) / (-cos(phi1R - phi2R) ^ 2 * a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + a1 ^ 2 * a2 ^ 2 * m1 * m2 + a2 ^ 2 * l1 ^ 2 * m2 ^ 2 + J1 * a2 ^ 2 * m2 + J2 * a1 ^ 2 * m1 + J2 * l1 ^ 2 * m2 + J1 * J2); 0; 1;];
cT = [0 0 0 0 1 0];
d = 0;

sysk = ss(A,b,cT,d);        % Zeitkontinuierliches System
sysd = c2d(sysk,Ta,'zoh');  % Zeitdiskretes System

end

